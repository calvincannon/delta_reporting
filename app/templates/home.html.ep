% layout 'main';

<style>
#gauge svg
{
   height: 200px;
   width: 200px;
}
</style>

<div class="row">

   <div id="gauge" class="with-3d-shadow with-transitions">
      <div class="col-md-2">
         <div id="hosts" class="media-body with-3d-shadow with-transitions">
         <h4>Host count</h4>
            <svg></svg>
         </div> <!-- hosts -->
      </div> <!-- col-md-2 -->

      <div class="col-md-2">
         <div id="promises" class="media-body with-3d-shadow with-transitions">
         <h4>Promise count</h4>
            <svg></svg>
         </div> <!-- promises -->
      </div> <!-- col-md-2 -->
   </div> <!-- gauge -->

</div> <!-- row -->

<div class="row">
   <div class="col-md-4">
      <h4>Last client data capture: <%= $latest_date %> <%= $latest_time %></h4>
   </div> <!-- col-md-4 -->
</div> <!-- row -->

<hr>

   <p>Welcome to Delta Reporting, a promise and class reporting tool for CFEngine. With Delta Reporting you'll be able to query agent knowledge of classes and promise outcomes, both past and present.</p>

   <h2>Getting started</h2>

   <p>The menu at the top leads to:</p>

   <dl class="dl-horizontal">
      <dt>Classes</dt>
      <dd>Query current and past classes for some or all hosts.</dd>
      <dt>Promises</dt>
      <dd>Query current and past promise outcomes for some or all hosts.</dd>
      <dt>Reports</dt>
      <dd>Canned reports including inventory and missing hosts.
   </dl>


<script type="text/javascript">
   var host_data = <%== $active_missing %>;

   var promise_data = <%== $promise_count %>;

   var gauge_components =
      nv.models.pieChart()
      .x(function (d) { return d.label; })
      .y(function (d) { return d.value; })
      .donut(true)
      .donutLabelsOutside(false)
      .showLegend(false)
      .showLabels(false)
      .color([ 'royalblue', 'crimson', 'orange' ])
      .tooltipContent(function(key, y, e, graph)
      { 
         return '<h4>' + key + ': ' + parseInt(y) + '</h4>';
      })
      ;
   var num_gauge = gauge_components;

nv.addGraph(function () 
{
   d3.select("#hosts svg")
      .datum( host_data )
      .transition().duration(100)
      .call( num_gauge );

   return num_gauge;
});

nv.addGraph(function () 
{
   d3.select("#promises svg")
      .datum( promise_data )
      .transition().duration(100)
      .call( num_gauge );

   return num_gauge;

});
</script>

	</body>
</html>
