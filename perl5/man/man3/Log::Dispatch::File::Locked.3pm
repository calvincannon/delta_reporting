.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.30)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Log::Dispatch::File::Locked 3"
.TH Log::Dispatch::File::Locked 3 "2015-06-14" "perl v5.20.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Log::Dispatch::File::Locked \- Subclass of Log::Dispatch::File to facilitate locking
.SH "VERSION"
.IX Header "VERSION"
version 2.45
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Log::Dispatch;
\&
\&  my $log = Log::Dispatch\->new(
\&      outputs => [
\&          [
\&              \*(AqFile::Locked\*(Aq,
\&              min_level => \*(Aqinfo\*(Aq,
\&              filename  => \*(AqSomefile.log\*(Aq,
\&              mode      => \*(Aq>>\*(Aq,
\&              newline   => 1
\&          ]
\&      ],
\&  );
\&
\&  $log\->emerg("I\*(Aqve fallen and I can\*(Aqt get up");
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module acts exactly like Log::Dispatch::File except that it
obtains an exclusive lock on the file while opening it.
.SH "CAVEATS"
.IX Header "CAVEATS"
\&\fB\s-1DANGER\s0!\fR Use very carefully in multi-process environments. Because the lock
is obtained at file open time, not at write time, you may experience deadlocks
in your system.
.PP
You can partially work around this by using the \f(CW\*(C`close_after_write\*(C'\fR option,
which causes the file to be re-opened every time a log message is written.
.PP
Alternatively, the \f(CW\*(C`syswrite\*(C'\fR option does atomic writes, which may mean that
you don't need locking at all.
.PP
See  Log::Dispatch::File) for details on these options.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\*(L"flock\*(R" in perlfunc
.SH "AUTHOR"
.IX Header "AUTHOR"
Dave Rolsky <autarch@urth.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2015 by Dave Rolsky.
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The Artistic License 2.0 (GPL Compatible)
.Ve
