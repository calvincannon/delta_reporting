.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.13)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mojolicious::Plugin::DefaultHelpers 3"
.TH Mojolicious::Plugin::DefaultHelpers 3 "2014-02-07" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojolicious::Plugin::DefaultHelpers \- Default helpers plugin
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  # Mojolicious
\&  $self\->plugin(\*(AqDefaultHelpers\*(Aq);
\&
\&  # Mojolicious::Lite
\&  plugin \*(AqDefaultHelpers\*(Aq;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mojolicious::Plugin::DefaultHelpers is a collection of renderer helpers for
Mojolicious.
.PP
This is a core plugin, that means it is always enabled and its code a good
example for learning to build new plugins, you're welcome to fork it.
.PP
See \*(L"\s-1PLUGINS\s0\*(R" in Mojolicious::Plugins for a list of plugins that are available
by default.
.SH "HELPERS"
.IX Header "HELPERS"
Mojolicious::Plugin::DefaultHelpers implements the following helpers.
.SS "accepts"
.IX Subsection "accepts"
.Vb 2
\&  %= accepts\->[0] // \*(Aqhtml\*(Aq
\&  %= accepts(\*(Aqhtml\*(Aq, \*(Aqjson\*(Aq, \*(Aqtxt\*(Aq) // \*(Aqhtml\*(Aq
.Ve
.PP
Select best possible representation for resource from \f(CW\*(C`Accept\*(C'\fR request
header, \f(CW\*(C`format\*(C'\fR stash value or \f(CW\*(C`format\*(C'\fR \s-1GET/POST\s0 parameter with
\&\*(L"accepts\*(R" in Mojolicious::Renderer, defaults to returning the first extension
if no preference could be detected.
.PP
.Vb 2
\&  # Check if JSON is acceptable
\&  $self\->render(json => {hello => \*(Aqworld\*(Aq}) if $self\->accepts(\*(Aqjson\*(Aq);
\&
\&  # Check if JSON was specifically requested
\&  $self\->render(json => {hello => \*(Aqworld\*(Aq}) if $self\->accepts(\*(Aq\*(Aq, \*(Aqjson\*(Aq);
\&
\&  # Unsupported representation
\&  $self\->render(data => \*(Aq\*(Aq, status => 204)
\&    unless my $format = $self\->accepts(\*(Aqhtml\*(Aq, \*(Aqjson\*(Aq);
\&
\&  # Detected representations to select from
\&  my @formats = @{$self\->accepts};
.Ve
.SS "app"
.IX Subsection "app"
.Vb 1
\&  %= app\->secrets\->[0]
.Ve
.PP
Alias for \*(L"app\*(R" in Mojolicious::Controller.
.SS "b"
.IX Subsection "b"
.Vb 1
\&  %= b(\*(Aqtest 123\*(Aq)\->b64_encode
.Ve
.PP
Turn string into a Mojo::ByteStream object.
.SS "c"
.IX Subsection "c"
.Vb 1
\&  %= c(qw(a b c))\->shuffle\->join
.Ve
.PP
Turn list into a Mojo::Collection object.
.SS "config"
.IX Subsection "config"
.Vb 1
\&  %= config \*(Aqsomething\*(Aq
.Ve
.PP
Alias for \*(L"config\*(R" in Mojo.
.SS "content"
.IX Subsection "content"
.Vb 7
\&  %= content foo => begin
\&    test
\&  % end
\&  %= content bar => \*(AqHello World!\*(Aq
\&  %= content \*(Aqfoo\*(Aq
\&  %= content \*(Aqbar\*(Aq
\&  %= content
.Ve
.PP
Store partial rendered content in named buffer and retrieve it, defaults to
retrieving the named buffer \f(CW\*(C`content\*(C'\fR, which is commonly used for the
renderers \f(CW\*(C`layout\*(C'\fR and \f(CW\*(C`extends\*(C'\fR features. Note that new content will be
ignored if the named buffer is already in use.
.SS "content_for"
.IX Subsection "content_for"
.Vb 4
\&  % content_for foo => begin
\&    test
\&  % end
\&  %= content_for \*(Aqfoo\*(Aq
.Ve
.PP
Append partial rendered content to named buffer and retrieve it. Note that
named buffers are shared with the \*(L"content\*(R" helper.
.PP
.Vb 7
\&  % content_for message => begin
\&    Hello
\&  % end
\&  % content_for message => begin
\&    world!
\&  % end
\&  %= content_for \*(Aqmessage\*(Aq
.Ve
.SS "csrf_token"
.IX Subsection "csrf_token"
.Vb 1
\&  %= csrf_token
.Ve
.PP
Get \s-1CSRF\s0 token from \*(L"session\*(R", and generate one if none exists.
.SS "current_route"
.IX Subsection "current_route"
.Vb 4
\&  % if (current_route \*(Aqlogin\*(Aq) {
\&    Welcome to Mojolicious!
\&  % }
\&  %= current_route
.Ve
.PP
Check or get name of current route.
.SS "dumper"
.IX Subsection "dumper"
.Vb 1
\&  %= dumper {some => \*(Aqdata\*(Aq}
.Ve
.PP
Dump a Perl data structure with \*(L"dumper\*(R" in Mojo::Util.
.SS "extends"
.IX Subsection "extends"
.Vb 2
\&  % extends \*(Aqblue\*(Aq;
\&  % extends \*(Aqblue\*(Aq, title => \*(AqBlue!\*(Aq;
.Ve
.PP
Extend a template. All additional values get merged into the \*(L"stash\*(R".
.SS "flash"
.IX Subsection "flash"
.Vb 1
\&  %= flash \*(Aqfoo\*(Aq
.Ve
.PP
Alias for \*(L"flash\*(R" in Mojolicious::Controller.
.SS "include"
.IX Subsection "include"
.Vb 2
\&  %= include \*(Aqmenubar\*(Aq
\&  %= include \*(Aqmenubar\*(Aq, format => \*(Aqtxt\*(Aq
.Ve
.PP
Include a partial template, all arguments get localized automatically and are
only available in the partial template.
.SS "layout"
.IX Subsection "layout"
.Vb 2
\&  % layout \*(Aqgreen\*(Aq;
\&  % layout \*(Aqgreen\*(Aq, title => \*(AqGreen!\*(Aq;
.Ve
.PP
Render this template with a layout. All additional values get merged into the
\&\*(L"stash\*(R".
.SS "param"
.IX Subsection "param"
.Vb 1
\&  %= param \*(Aqfoo\*(Aq
.Ve
.PP
Alias for \*(L"param\*(R" in Mojolicious::Controller.
.SS "session"
.IX Subsection "session"
.Vb 1
\&  %= session \*(Aqfoo\*(Aq
.Ve
.PP
Alias for \*(L"session\*(R" in Mojolicious::Controller.
.SS "stash"
.IX Subsection "stash"
.Vb 2
\&  %= stash \*(Aqfoo\*(Aq
\&  % stash foo => \*(Aqbar\*(Aq;
.Ve
.PP
Alias for \*(L"stash\*(R" in Mojolicious::Controller.
.PP
.Vb 1
\&  %= stash(\*(Aqname\*(Aq) // \*(AqSomebody\*(Aq
.Ve
.SS "title"
.IX Subsection "title"
.Vb 3
\&  % title \*(AqWelcome!\*(Aq;
\&  % title \*(AqWelcome!\*(Aq, foo => \*(Aqbar\*(Aq;
\&  %= title
.Ve
.PP
Page title. All additional values get merged into the \*(L"stash\*(R".
.SS "ua"
.IX Subsection "ua"
.Vb 1
\&  %= ua\->get(\*(Aqmojolicio.us\*(Aq)\->res\->dom\->at(\*(Aqtitle\*(Aq)\->text
.Ve
.PP
Alias for \*(L"ua\*(R" in Mojo.
.SS "url_for"
.IX Subsection "url_for"
.Vb 1
\&  %= url_for \*(Aqnamed\*(Aq, controller => \*(Aqbar\*(Aq, action => \*(Aqbaz\*(Aq
.Ve
.PP
Alias for \*(L"url_for\*(R" in Mojolicious::Controller.
.SS "url_with"
.IX Subsection "url_with"
.Vb 1
\&  %= url_with \*(Aqnamed\*(Aq, controller => \*(Aqbar\*(Aq, action => \*(Aqbaz\*(Aq
.Ve
.PP
Does the same as \*(L"url_for\*(R", but inherits query parameters from the current
request.
.PP
.Vb 1
\&  %= url_with\->query([page => 2])
.Ve
.SS "validation"
.IX Subsection "validation"
.Vb 1
\&  %= validation\->param(\*(Aqfoo\*(Aq)
.Ve
.PP
Alias for \*(L"validation\*(R" in Mojolicious::Controller.
.SH "METHODS"
.IX Header "METHODS"
Mojolicious::Plugin::DefaultHelpers inherits all methods from
Mojolicious::Plugin and implements the following new ones.
.SS "register"
.IX Subsection "register"
.Vb 1
\&  $plugin\->register(Mojolicious\->new);
.Ve
.PP
Register helpers in Mojolicious application.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Mojolicious, Mojolicious::Guides, <http://mojolicio.us>.
