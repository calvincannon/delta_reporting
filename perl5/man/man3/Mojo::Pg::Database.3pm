.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.30)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mojo::Pg::Database 3"
.TH Mojo::Pg::Database 3 "2015-08-13" "perl v5.20.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojo::Pg::Database \- Database
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Mojo::Pg::Database;
\&
\&  my $db = Mojo::Pg::Database\->new(pg => $pg, dbh => $dbh);
\&  $db\->query(\*(Aqselect * from foo\*(Aq)
\&    \->hashes\->map(sub { $_\->{bar} })\->join("\en")\->say;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mojo::Pg::Database is a container for DBD::Pg database handles used by
Mojo::Pg.
.SH "EVENTS"
.IX Header "EVENTS"
Mojo::Pg::Database inherits all events from Mojo::EventEmitter and can
emit the following new ones.
.SS "close"
.IX Subsection "close"
.Vb 4
\&  $db\->on(close => sub {
\&    my $db = shift;
\&    ...
\&  });
.Ve
.PP
Emitted when the database connection gets closed while waiting for
notifications.
.SS "notification"
.IX Subsection "notification"
.Vb 4
\&  $db\->on(notification => sub {
\&    my ($db, $name, $pid, $payload) = @_;
\&    ...
\&  });
.Ve
.PP
Emitted when a notification has been received.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
Mojo::Pg::Database implements the following attributes.
.SS "dbh"
.IX Subsection "dbh"
.Vb 2
\&  my $dbh = $db\->dbh;
\&  $db     = $db\->dbh(DBI\->new);
.Ve
.PP
DBD::Pg database handle used for all queries.
.SS "pg"
.IX Subsection "pg"
.Vb 2
\&  my $pg = $db\->pg;
\&  $db    = $db\->pg(Mojo::Pg\->new);
.Ve
.PP
Mojo::Pg object this database belongs to.
.SH "METHODS"
.IX Header "METHODS"
Mojo::Pg::Database inherits all methods from Mojo::EventEmitter and
implements the following new ones.
.SS "begin"
.IX Subsection "begin"
.Vb 1
\&  my $tx = $db\->begin;
.Ve
.PP
Begin transaction and return Mojo::Pg::Transaction object, which will
automatically roll back the transaction unless
\&\*(L"commit\*(R" in Mojo::Pg::Transaction has been called before it is destroyed.
.PP
.Vb 8
\&  # Insert rows in a transaction
\&  eval {
\&    my $tx = $db\->begin;
\&    $db\->query(\*(Aqinsert into frameworks values (?)\*(Aq, \*(AqCatalyst\*(Aq);
\&    $db\->query(\*(Aqinsert into frameworks values (?)\*(Aq, \*(AqMojolicious\*(Aq);
\&    $tx\->commit;
\&  };
\&  say $@ if $@;
.Ve
.SS "disconnect"
.IX Subsection "disconnect"
.Vb 1
\&  $db\->disconnect;
.Ve
.PP
Disconnect \*(L"dbh\*(R" and prevent it from getting cached again.
.SS "dollar_only"
.IX Subsection "dollar_only"
.Vb 1
\&  $db = $db\->dollar_only;
.Ve
.PP
Activate \f(CW\*(C`pg_placeholder_dollaronly\*(C'\fR for next \*(L"query\*(R" call and allow \f(CW\*(C`?\*(C'\fR
to be used as an operator.
.PP
.Vb 3
\&  # Check for a key in a JSON document
\&  $db\->dollar_only\->query(\*(Aqselect * from foo where bar ? $1\*(Aq, \*(Aqbaz\*(Aq)
\&    \->expand\->hashes\->map(sub { $_\->{bar}{baz} })\->join("\en")\->say;
.Ve
.SS "is_listening"
.IX Subsection "is_listening"
.Vb 1
\&  my $bool = $db\->is_listening;
.Ve
.PP
Check if \*(L"dbh\*(R" is listening for notifications.
.SS "listen"
.IX Subsection "listen"
.Vb 1
\&  $db = $db\->listen(\*(Aqfoo\*(Aq);
.Ve
.PP
Subscribe to a channel and receive \*(L"notification\*(R" events when the
Mojo::IOLoop event loop is running.
.SS "notify"
.IX Subsection "notify"
.Vb 2
\&  $db = $db\->notify(\*(Aqfoo\*(Aq);
\&  $db = $db\->notify(foo => \*(Aqbar\*(Aq);
.Ve
.PP
Notify a channel.
.SS "pid"
.IX Subsection "pid"
.Vb 1
\&  my $pid = $db\->pid;
.Ve
.PP
Return the process id of the backend server process.
.SS "ping"
.IX Subsection "ping"
.Vb 1
\&  my $bool = $db\->ping;
.Ve
.PP
Check database connection.
.SS "query"
.IX Subsection "query"
.Vb 3
\&  my $results = $db\->query(\*(Aqselect * from foo\*(Aq);
\&  my $results = $db\->query(\*(Aqinsert into foo values (?, ?, ?)\*(Aq, @values);
\&  my $results = $db\->query(\*(Aqselect ?::json as foo\*(Aq, {json => {bar => \*(Aqbaz\*(Aq}});
.Ve
.PP
Execute a blocking statement and return a Mojo::Pg::Results object with the
results. The DBD::Pg statement handle will be automatically reused when it
is not active anymore, to increase the performance of future queries. You can
also append a callback to perform operation non-blocking.
.PP
.Vb 5
\&  $db\->query(\*(Aqinsert into foo values (?, ?, ?)\*(Aq => @values => sub {
\&    my ($db, $err, $results) = @_;
\&    ...
\&  });
\&  Mojo::IOLoop\->start unless Mojo::IOLoop\->is_running;
.Ve
.SS "unlisten"
.IX Subsection "unlisten"
.Vb 2
\&  $db = $db\->unlisten(\*(Aqfoo\*(Aq);
\&  $db = $db\->unlisten(\*(Aq*\*(Aq);
.Ve
.PP
Unsubscribe from a channel, \f(CW\*(C`*\*(C'\fR can be used to unsubscribe from all channels.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Mojo::Pg, Mojolicious::Guides, <http://mojolicio.us>.
